"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_session
from services.user_service import UserService
from services.analytics_service import AnalyticsService
from utils.keyboards import get_main_menu_keyboard
import logging

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        db = get_session()
        
        try:
            user_service = UserService(db)
            analytics_service = AnalyticsService(db)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = user_service.create_or_update_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            analytics_service.log_user_activity(
                user_id=db_user.id,
                activity_type="start_command"
            )
            
            db.commit()
            
            welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:

üìù **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

üëë **–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.
            """
            
            keyboard = get_main_menu_keyboard(db_user.is_admin)
            
            await update.message.reply_text(
                welcome_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**–†–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏:**
/create_post - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
/my_posts - –ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã
/all_posts - –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ
/edit_post - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç

**–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**
/analytics - –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
/user_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/post_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
            """
            
            if db_user.is_admin:
                help_text += """
**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/manage_users - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
/manage_posts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏
/promote_user - –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
/export_data - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                """
            
            help_text += """
**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
2. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            """
            
            await update.message.reply_text(help_text, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.")

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            posts_count = len([p for p in db_user.posts if not p.is_deleted])
            published_posts = len([p for p in db_user.posts if p.is_published and not p.is_deleted])
            
            profile_text = f"""
üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ ID: `{db_user.telegram_id}`
‚Ä¢ –ò–º—è: {db_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Username: @{db_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –†–æ–ª—å: {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if db_user.is_admin else 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {posts_count}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_posts}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {db_user.created_at.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {db_user.last_activity.strftime('%d.%m.%Y %H:%M')}
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìù –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="main_my_posts"),
                    InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="main_my_stats")
                ],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.message.reply_text(
                profile_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ profile_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")

async def handle_main_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data.replace("main_", "")
        
        if data == "menu":
            db = get_session()
            try:
                user_service = UserService(db)
                db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
                
                keyboard = get_main_menu_keyboard(db_user.is_admin if db_user else False)
                
                await query.edit_message_text(
                    "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            finally:
                db.close()
                
        elif data == "my_posts" or data == "my_objects":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤
            from handlers.posts import my_posts_callback
            await my_posts_callback(update, context)
            
        elif data == "my_stats":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            from handlers.analytics import user_personal_stats_callback
            await user_personal_stats_callback(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_main_callback: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.")
