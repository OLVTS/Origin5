"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_session
from services.post_service import PostService
from services.user_service import UserService
from services.analytics_service import AnalyticsService
from utils.templates import get_post_templates, get_template_fields
from utils.keyboards import get_posts_keyboard, get_post_actions_keyboard
import logging

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
user_states = {}

async def create_post_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
            templates = get_post_templates()
            
            if not templates:
                await update.message.reply_text("‚ùå –®–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏
            keyboard_buttons = []
            for template in templates:
                keyboard_buttons.append([
                    InlineKeyboardButton(
                        f"üìã {template['name']}", 
                        callback_data=f"post_template_{template['id']}"
                    )
                ])
            
            keyboard_buttons.append([
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="post_cancel")
            ])
            
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            text = """
üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞**

–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:**
‚Ä¢ –ù–æ–≤–æ—Å—Ç—å - –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –°—Ç–∞—Ç—å—è - –¥–ª—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Å—Ç–∞—Ç–µ–π
‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ - –¥–ª—è –≤–∞–∂–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ –û–±–∑–æ—Ä - –¥–ª—è –æ–±–∑–æ—Ä–æ–≤ –∏ —Ä–µ—Ü–µ–Ω–∑–∏–π
            """
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_post_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞.")

async def my_posts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤"""
    try:
        await my_posts_callback(update, context, is_command=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_posts_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤.")

async def my_posts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, is_command=False) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤ (callback –∏ –∫–æ–º–∞–Ω–¥–∞)"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            post_service = PostService(db)
            
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user:
                message_text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                if is_command:
                    await update.message.reply_text(message_text)
                else:
                    await update.callback_query.edit_message_text(message_text)
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            posts = post_service.get_user_posts(db_user.id)
            
            if not posts:
                text = "üìù **–ú–æ–∏ –ø–æ—Å—Ç—ã**\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_post –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞."
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="post_create")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            else:
                active_posts = [p for p in posts if not p.is_deleted]
                published_posts = [p for p in active_posts if p.is_published]
                
                text = f"""
üìù **–ú–æ–∏ –ø–æ—Å—Ç—ã**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(active_posts)}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {len(published_posts)}
‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {len(active_posts) - len(published_posts)}

üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:**
                """
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å—Ç–æ–≤
                for post in active_posts[:5]:
                    status = "üü¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if post.is_published else "üü° –ß–µ—Ä–Ω–æ–≤–∏–∫"
                    text += f"\n‚Ä¢ #{post.post_number} - {post.title[:30]}... ({status})"
                
                keyboard_buttons = [
                    [InlineKeyboardButton("üìã –í—Å–µ –º–æ–∏ –ø–æ—Å—Ç—ã", callback_data="post_list_my")],
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="post_create")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            if is_command:
                await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            else:
                await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_posts_callback: {e}")

async def all_posts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            post_service = PostService(db)
            
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            posts = post_service.get_published_posts(limit=20)
            
            if not posts:
                text = "üì∞ **–í—Å–µ –ø–æ—Å—Ç—ã**\n\n–ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ø–æ—Å—Ç!"
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="post_create")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            else:
                text = f"üì∞ **–í—Å–µ –ø–æ—Å—Ç—ã** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(posts)})\n\n"
                
                for post in posts:
                    author_name = post.author.first_name or post.author.username or "–ê–Ω–æ–Ω–∏–º"
                    text += f"‚Ä¢ #{post.post_number} - {post.title[:40]}...\n"
                    text += f"  üë§ {author_name} | üìÖ {post.published_at.strftime('%d.%m.%Y')}\n\n"
                
                keyboard_buttons = [
                    [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="post_list_all")],
                    [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤", callback_data="post_search")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ all_posts_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤.")

async def edit_post_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    try:
        args = context.args
        if not args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä: /edit_post 123"
            )
            return
        
        try:
            post_number = int(args[0])
        except ValueError:
            await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        db = get_session()
        
        try:
            user_service = UserService(db)
            post_service = PostService(db)
            
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
            post = post_service.get_post_by_number(post_number)
            
            if not post:
                await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç #{post_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if post.author_id != db_user.id and not db_user.is_admin:
                await update.message.reply_text("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã.")
                return
            
            # –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            status = "üü¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if post.is_published else "üü° –ß–µ—Ä–Ω–æ–≤–∏–∫"
            text = f"""
‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ #{post.post_number}**

üìã **–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post.title}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}
‚Ä¢ –ê–≤—Ç–æ—Ä: {post.author.first_name or post.author.username}
‚Ä¢ –°–æ–∑–¥–∞–Ω: {post.created_at.strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω: {post.updated_at.strftime('%d.%m.%Y %H:%M')}

**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**
{post.content[:200]}{'...' if len(post.content) > 200 else ''}
            """
            
            keyboard = get_post_actions_keyboard(post, db_user.is_admin)
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_post_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞.")

async def handle_post_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data.replace("post_", "")
        
        if data.startswith("template_"):
            template_id = data.replace("template_", "")
            await handle_template_selection(update, context, template_id)
            
        elif data == "create":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            await create_post_command(update, context)
            
        elif data == "cancel":
            # –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            if update.effective_user.id in user_states:
                del user_states[update.effective_user.id]
            
            await query.edit_message_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            
        elif data.startswith("view_"):
            post_number = int(data.replace("view_", ""))
            await show_post_details(update, context, post_number)
            
        elif data.startswith("edit_"):
            post_number = int(data.replace("edit_", ""))
            await start_post_editing(update, context, post_number)
            
        elif data.startswith("delete_"):
            post_number = int(data.replace("delete_", ""))
            await confirm_post_deletion(update, context, post_number)
            
        elif data.startswith("publish_"):
            post_number = int(data.replace("publish_", ""))
            await toggle_post_publication(update, context, post_number)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_post_callback: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.")

async def handle_template_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, template_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
    try:
        templates = get_post_templates()
        template = next((t for t in templates if t['id'] == template_id), None)
        
        if not template:
            await update.callback_query.edit_message_text("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[update.effective_user.id] = {
            'state': 'creating_post',
            'template': template,
            'fields': {},
            'current_field': 0
        }
        
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—è
        await ask_next_field(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_template_selection: {e}")

async def ask_next_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞"""
    try:
        user_id = update.effective_user.id
        if user_id not in user_states:
            return
        
        state = user_states[user_id]
        template = state['template']
        fields = get_template_fields(template['id'])
        current_field_index = state['current_field']
        
        if current_field_index >= len(fields):
            # –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
            await create_post_from_template(update, context)
            return
        
        field = fields[current_field_index]
        
        text = f"""
üìù **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: {template['name']}**

–®–∞–≥ {current_field_index + 1} –∏–∑ {len(fields)}

**{field['label']}**
{field.get('description', '')}

{field.get('placeholder', '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')}
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="post_cancel")]
        ])
        
        await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_next_field: {e}")

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = update.effective_user.id
        
        if user_id in user_states and user_states[user_id]['state'] == 'creating_post':
            await process_field_input(update, context)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")

async def process_field_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—è —à–∞–±–ª–æ–Ω–∞"""
    try:
        user_id = update.effective_user.id
        state = user_states[user_id]
        template = state['template']
        fields = get_template_fields(template['id'])
        current_field_index = state['current_field']
        
        if current_field_index >= len(fields):
            return
        
        field = fields[current_field_index]
        user_input = update.message.text
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
        if field.get('required', True) and not user_input.strip():
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª–µ '{field['label']}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
        state['fields'][field['name']] = user_input
        state['current_field'] += 1
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
        await ask_next_field_via_message(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_field_input: {e}")

async def ask_next_field_via_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—è —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        user_id = update.effective_user.id
        if user_id not in user_states:
            return
        
        state = user_states[user_id]
        template = state['template']
        fields = get_template_fields(template['id'])
        current_field_index = state['current_field']
        
        if current_field_index >= len(fields):
            # –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
            await create_post_from_template(update, context)
            return
        
        field = fields[current_field_index]
        
        text = f"""
‚úÖ –ü–æ–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!

üìù **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: {template['name']}**

–®–∞–≥ {current_field_index + 1} –∏–∑ {len(fields)}

**{field['label']}**
{field.get('description', '')}

{field.get('placeholder', '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:')}
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="post_cancel")]
        ])
        
        await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_next_field_via_message: {e}")

async def create_post_from_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    try:
        user_id = update.effective_user.id
        if user_id not in user_states:
            return
        
        state = user_states[user_id]
        template = state['template']
        fields_data = state['fields']
        
        db = get_session()
        
        try:
            user_service = UserService(db)
            post_service = PostService(db)
            analytics_service = AnalyticsService(db)
            
            db_user = user_service.get_user_by_telegram_id(user_id)
            
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
            title = fields_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            content = template['content_template'].format(**fields_data)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
            post = post_service.create_post(
                title=title,
                content=content,
                author_id=db_user.id,
                template_type=template['id']
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            analytics_service.log_user_activity(
                user_id=db_user.id,
                activity_type="post_create",
                activity_data={"post_id": post.id, "template": template['id']}
            )
            
            db.commit()
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            del user_states[user_id]
            
            text = f"""
‚úÖ **–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**

üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ:**
‚Ä¢ –ù–æ–º–µ—Ä: #{post.post_number}
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {post.title}
‚Ä¢ –®–∞–±–ª–æ–Ω: {template['name']}
‚Ä¢ –°—Ç–∞—Ç—É—Å: üü° –ß–µ—Ä–Ω–æ–≤–∏–∫

–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫. –í—ã –º–æ–∂–µ—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ.
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üü¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post_publish_{post.post_number}"),
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"post_edit_{post.post_number}")
                ],
                [
                    InlineKeyboardButton("üìù –ú–æ–∏ –ø–æ—Å—Ç—ã", callback_data="main_my_posts"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_post_from_template: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞.")

async def show_post_details(update: Update, context: ContextTypes.DEFAULT_TYPE, post_number: int) -> None:
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ"""
    try:
        db = get_session()
        
        try:
            post_service = PostService(db)
            post = post_service.get_post_by_number(post_number)
            
            if not post:
                await update.callback_query.edit_message_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            status = "üü¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if post.is_published else "üü° –ß–µ—Ä–Ω–æ–≤–∏–∫"
            author_name = post.author.first_name or post.author.username or "–ê–Ω–æ–Ω–∏–º"
            
            text = f"""
üìã **–ü–æ—Å—Ç #{post.post_number}**

**{post.title}**

üë§ –ê–≤—Ç–æ—Ä: {author_name}
üìÖ –°–æ–∑–¥–∞–Ω: {post.created_at.strftime('%d.%m.%Y %H:%M')}
üìä –°—Ç–∞—Ç—É—Å: {status}

**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**
{post.content}
            """
            
            keyboard_buttons = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="post_list_all")]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∞
            user_service = UserService(db)
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if db_user and (post.author_id == db_user.id or db_user.is_admin):
                keyboard_buttons.insert(0, [
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"post_edit_{post_number}"),
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"post_delete_{post_number}")
                ])
                
                if not post.is_published:
                    keyboard_buttons.insert(1, [
                        InlineKeyboardButton("üü¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"post_publish_{post_number}")
                    ])
            
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_post_details: {e}")

async def toggle_post_publication(update: Update, context: ContextTypes.DEFAULT_TYPE, post_number: int) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            post_service = PostService(db)
            analytics_service = AnalyticsService(db)
            
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            post = post_service.get_post_by_number(post_number)
            
            if not post or not db_user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ—Å—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if post.author_id != db_user.id and not db_user.is_admin:
                await update.callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
                return
            
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            success = post_service.toggle_post_publication(post_number)
            
            if success:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                action = "publish" if not post.is_published else "unpublish"
                analytics_service.log_user_activity(
                    user_id=db_user.id,
                    activity_type=f"post_{action}",
                    activity_data={"post_id": post.id}
                )
                
                db.commit()
                
                status_text = "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if not post.is_published else "—Å–Ω—è—Ç —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                await update.callback_query.answer(f"‚úÖ –ü–æ—Å—Ç {status_text}", show_alert=True)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await show_post_details(update, context, post_number)
            else:
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
                
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ toggle_post_publication: {e}")
