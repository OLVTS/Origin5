"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_session
from services.user_service import UserService
from services.post_service import PostService
from services.analytics_service import AnalyticsService
from utils.decorators import admin_required
import logging

logger = logging.getLogger(__name__)

@admin_required
async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            post_service = PostService(db)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_users = user_service.get_users_count()
            active_users = user_service.get_active_users_count()
            total_posts = post_service.get_posts_count()
            published_posts = post_service.get_published_posts_count()
            
            text = f"""
üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {published_posts}

üõ† **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                    InlineKeyboardButton("üìù –ü–æ—Å—Ç—ã", callback_data="admin_posts")
                ],
                [
                    InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"),
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")
                ],
                [
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_panel_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@admin_required
async def manage_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            users = user_service.get_all_users(limit=20)
            
            if not users:
                text = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            else:
                text = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
                
                for user in users:
                    status = "üëë –ê–¥–º–∏–Ω" if user.is_admin else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    activity_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                    name = user.first_name or user.username or f"ID:{user.telegram_id}"
                    
                    text += f"‚Ä¢ {name} ({status}, {activity_status})\n"
                    text += f"  ID: `{user.telegram_id}` | –ü–æ—Å—Ç–æ–≤: {len(user.posts)}\n\n"
                
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_promote"),
                        InlineKeyboardButton("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_block")
                    ],
                    [
                        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_user_stats"),
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")
                    ],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                ])
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_users_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@admin_required
async def manage_posts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏"""
    try:
        db = get_session()
        
        try:
            post_service = PostService(db)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤
            recent_posts = post_service.get_recent_posts(limit=10)
            pending_posts = post_service.get_unpublished_posts(limit=10)
            
            text = f"""
üìù **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {post_service.get_posts_count()}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {post_service.get_published_posts_count()}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {len(pending_posts)}

üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:**
            """
            
            for post in recent_posts[:5]:
                status = "üü¢" if post.is_published else "üü°"
                author_name = post.author.first_name or post.author.username or "–ê–Ω–æ–Ω–∏–º"
                text += f"\n‚Ä¢ {status} #{post.post_number} - {post.title[:30]}..."
                text += f"\n  üë§ {author_name} | üìÖ {post.created_at.strftime('%d.%m.%Y')}"
            
            if pending_posts:
                text += f"\n\n‚è≥ **–û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**"
                for post in pending_posts[:3]:
                    author_name = post.author.first_name or post.author.username or "–ê–Ω–æ–Ω–∏–º"
                    text += f"\n‚Ä¢ #{post.post_number} - {post.title[:30]}... ({author_name})"
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìã –í—Å–µ –ø–æ—Å—Ç—ã", callback_data="admin_all_posts"),
                    InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="admin_pending_posts")
                ],
                [
                    InlineKeyboardButton("üóë –£–¥–∞–ª–µ–Ω–Ω—ã–µ", callback_data="admin_deleted_posts"),
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_post_stats")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_posts_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤.")

@admin_required
async def promote_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        args = context.args
        if not args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                "–ü—Ä–∏–º–µ—Ä: /promote_user 123456789"
            )
            return
        
        try:
            target_telegram_id = int(args[0])
        except ValueError:
            await update.message.reply_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        db = get_session()
        
        try:
            user_service = UserService(db)
            analytics_service = AnalyticsService(db)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = user_service.get_user_by_telegram_id(target_telegram_id)
            
            if not target_user:
                await update.message.reply_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return
            
            if target_user.is_admin:
                await update.message.reply_text(
                    f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.first_name or target_user.username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                return
            
            # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            success = user_service.promote_to_admin(target_telegram_id)
            
            if success:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                analytics_service.log_user_activity(
                    user_id=admin_user.id,
                    activity_type="user_promote",
                    activity_data={"target_user_id": target_user.id}
                )
                
                db.commit()
                
                target_name = target_user.first_name or target_user.username or f"ID:{target_telegram_id}"
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_name} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
                )
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                try:
                    await context.bot.send_message(
                        chat_id=target_telegram_id,
                        text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n\n"
                             "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
                    )
                except Exception:
                    # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ —Ç.–¥.)
                    pass
                
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ promote_user_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        db = get_session()
        try:
            user_service = UserService(db)
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user or not db_user.is_admin:
                await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
                return
        finally:
            db.close()
        
        data = query.data.replace("admin_", "")
        
        if data == "panel":
            await show_admin_panel(update, context)
            
        elif data == "users":
            await show_users_management(update, context)
            
        elif data == "posts":
            await show_posts_management(update, context)
            
        elif data == "analytics":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            from handlers.analytics import show_admin_analytics
            await show_admin_analytics(update, context)
            
        elif data == "export":
            await show_export_options(update, context)
            
        elif data == "settings":
            await show_admin_settings(update, context)
            
        elif data.startswith("user_"):
            await handle_user_action(update, context, data)
            
        elif data.startswith("post_"):
            await handle_post_action(update, context, data)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_callback: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            post_service = PostService(db)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_users = user_service.get_users_count()
            active_users = user_service.get_active_users_count()
            total_posts = post_service.get_posts_count()
            published_posts = post_service.get_published_posts_count()
            
            text = f"""
üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {active_users}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {published_posts}

üõ† **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
                    InlineKeyboardButton("üìù –ü–æ—Å—Ç—ã", callback_data="admin_posts")
                ],
                [
                    InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics"),
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")
                ],
                [
                    InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])
            
            await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_panel: {e}")

async def show_users_management(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            users = user_service.get_all_users(limit=20)
            
            text = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**\n\n"
            
            if not users:
                text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            else:
                for user in users:
                    status = "üëë –ê–¥–º–∏–Ω" if user.is_admin else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    activity_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                    name = user.first_name or user.username or f"ID:{user.telegram_id}"
                    
                    text += f"‚Ä¢ {name} ({status}, {activity_status})\n"
                    text += f"  ID: `{user.telegram_id}` | –ü–æ—Å—Ç–æ–≤: {len(user.posts)}\n\n"
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_promote"),
                    InlineKeyboardButton("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_block")
                ],
                [
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_user_stats"),
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_users")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
            
            await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_users_management: {e}")

async def show_posts_management(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏"""
    try:
        db = get_session()
        
        try:
            post_service = PostService(db)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø–æ—Å—Ç–æ–≤
            recent_posts = post_service.get_recent_posts(limit=10)
            pending_posts = post_service.get_unpublished_posts(limit=10)
            
            text = f"""
üìù **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {post_service.get_posts_count()}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {post_service.get_published_posts_count()}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {len(pending_posts)}

üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:**
            """
            
            for post in recent_posts[:5]:
                status = "üü¢" if post.is_published else "üü°"
                author_name = post.author.first_name or post.author.username or "–ê–Ω–æ–Ω–∏–º"
                text += f"\n‚Ä¢ {status} #{post.post_number} - {post.title[:30]}..."
                text += f"\n  üë§ {author_name} | üìÖ {post.created_at.strftime('%d.%m.%Y')}"
            
            if pending_posts:
                text += f"\n\n‚è≥ **–û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏:**"
                for post in pending_posts[:3]:
                    author_name = post.author.first_name or post.author.username or "–ê–Ω–æ–Ω–∏–º"
                    text += f"\n‚Ä¢ #{post.post_number} - {post.title[:30]}... ({author_name})"
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìã –í—Å–µ –ø–æ—Å—Ç—ã", callback_data="admin_all_posts"),
                    InlineKeyboardButton("‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", callback_data="admin_pending_posts")
                ],
                [
                    InlineKeyboardButton("üóë –£–¥–∞–ª–µ–Ω–Ω—ã–µ", callback_data="admin_deleted_posts"),
                    InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_post_stats")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ])
            
            await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_posts_management: {e}")

async def show_export_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        text = """
üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ CSV - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel/Google Sheets
‚Ä¢ JSON - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ PDF - –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤

üóÇ **–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –ü–æ—Å—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–∞–º–ø –¥–∞–Ω–Ω—ã—Ö
        """
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (CSV)", callback_data="admin_export_users_csv"),
                InlineKeyboardButton("üìù –ü–æ—Å—Ç—ã (CSV)", callback_data="admin_export_posts_csv")
            ],
            [
                InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (JSON)", callback_data="admin_export_analytics_json"),
                InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –¥–∞–º–ø", callback_data="admin_export_full")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
        
        await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_export_options: {e}")

async def show_admin_settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        text = """
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –ø–æ—Å—Ç–æ–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

üìù **–®–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤:**
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è–º–∏ —à–∞–±–ª–æ–Ω–æ–≤

‚è∞ **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:**
‚Ä¢ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        """
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìã –®–∞–±–ª–æ–Ω—ã", callback_data="admin_templates"),
                InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="admin_notifications")
            ],
            [
                InlineKeyboardButton("‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", callback_data="admin_automation"),
                InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏", callback_data="admin_backups")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
        ])
        
        await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_settings: {e}")
