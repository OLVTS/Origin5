"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–∏–≥—Ä–∞—Ü–∏–π
"""

import os
import sys
from datetime import datetime
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.orm import sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import Config
from database import Base, engine
from models import User, Post, UserActivity, Analytics, PostTemplate
from services.user_service import UserService
from services.analytics_service import AnalyticsService
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with engine.connect() as connection:
            connection.execute(text("SELECT 1"))
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def create_database_schema():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        Base.metadata.create_all(bind=engine)
        
        logger.info("‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ö–µ–º—ã: {e}")
        return False

def check_existing_tables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        inspector = inspect(engine)
        existing_tables = inspector.get_table_names()
        
        expected_tables = ['users', 'posts', 'user_activities', 'analytics', 'post_templates']
        
        logger.info(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")
        
        missing_tables = [table for table in expected_tables if table not in existing_tables]
        if missing_tables:
            logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
        else:
            logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        return existing_tables
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return []

def create_default_admins():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if not Config.DEFAULT_ADMINS:
        logger.info("‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return True
    
    try:
        SessionLocal = sessionmaker(bind=engine)
        db = SessionLocal()
        
        try:
            user_service = UserService(db)
            
            created_admins = []
            for admin_id in Config.DEFAULT_ADMINS:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
                    existing_user = user_service.get_user_by_telegram_id(admin_id)
                    
                    if existing_user:
                        if not existing_user.is_admin:
                            existing_user.is_admin = True
                            logger.info(f"üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                        else:
                            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        admin_user = user_service.create_or_update_user(
                            telegram_id=admin_id,
                            username="admin",
                            first_name="Administrator",
                            is_admin=True
                        )
                        created_admins.append(admin_id)
                        logger.info(f"üëë –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å ID: {admin_id}")
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
            
            db.commit()
            
            if created_admins:
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(created_admins)}")
            
            return True
            
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return False
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return False

def create_default_templates():
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        SessionLocal = sessionmaker(bind=engine)
        db = SessionLocal()
        
        try:
            from utils.templates import get_post_templates
            
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã
            templates_data = get_post_templates()
            
            created_templates = []
            updated_templates = []
            
            for template_data in templates_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω
                existing_template = db.query(PostTemplate).filter(
                    PostTemplate.name == template_data['name']
                ).first()
                
                template_fields = {
                    'id': template_data['id'],
                    'description': template_data['description'],
                    'icon': template_data['icon'],
                    'content_template': template_data['content_template']
                }
                
                if existing_template:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω
                    existing_template.description = template_data['description']
                    existing_template.template_fields = template_fields
                    existing_template.updated_at = datetime.utcnow()
                    updated_templates.append(template_data['name'])
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
                    new_template = PostTemplate(
                        name=template_data['name'],
                        description=template_data['description'],
                        template_fields=template_fields,
                        is_active=True,
                        usage_count=0
                    )
                    db.add(new_template)
                    created_templates.append(template_data['name'])
            
            db.commit()
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(created_templates)}")
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(updated_templates)}")
            
            if created_templates:
                logger.info(f"üìã –ù–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã: {', '.join(created_templates)}")
            
            return True
            
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            return False
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        return False

def create_initial_analytics():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        SessionLocal = sessionmaker(bind=engine)
        db = SessionLocal()
        
        try:
            analytics_service = AnalyticsService(db)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            initial_metrics = [
                ('system_init', 1, {'timestamp': datetime.utcnow().isoformat(), 'version': '1.0'}),
                ('database_schema_version', 1, {'version': '1.0', 'created_at': datetime.utcnow().isoformat()}),
                ('total_users', 0, {'initial_count': 0}),
                ('total_posts', 0, {'initial_count': 0})
            ]
            
            for metric_name, metric_value, metric_data in initial_metrics:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞
                existing_metric = db.query(Analytics).filter(
                    Analytics.metric_name == metric_name
                ).first()
                
                if not existing_metric:
                    analytics_service.save_metric(metric_name, metric_value, metric_data)
                    logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞: {metric_name}")
            
            db.commit()
            logger.info("‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
            return True
            
        except Exception as e:
            db.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return False
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return False

def create_indexes():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    try:
        with engine.connect() as connection:
            # –°–ø–∏—Å–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);",
                "CREATE INDEX IF NOT EXISTS idx_users_active ON users(is_active);",
                "CREATE INDEX IF NOT EXISTS idx_users_admin ON users(is_admin);",
                "CREATE INDEX IF NOT EXISTS idx_posts_author ON posts(author_id);",
                "CREATE INDEX IF NOT EXISTS idx_posts_published ON posts(is_published);",
                "CREATE INDEX IF NOT EXISTS idx_posts_deleted ON posts(is_deleted);",
                "CREATE INDEX IF NOT EXISTS idx_posts_template ON posts(template_type);",
                "CREATE INDEX IF NOT EXISTS idx_activities_user ON user_activities(user_id);",
                "CREATE INDEX IF NOT EXISTS idx_activities_type ON user_activities(activity_type);",
                "CREATE INDEX IF NOT EXISTS idx_activities_timestamp ON user_activities(timestamp);",
                "CREATE INDEX IF NOT EXISTS idx_analytics_metric ON analytics(metric_name);",
                "CREATE INDEX IF NOT EXISTS idx_analytics_date ON analytics(date);"
            ]
            
            for index_sql in indexes:
                try:
                    connection.execute(text(index_sql))
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {index_sql.split('idx_')[1].split(' ')[0] if 'idx_' in index_sql else 'unknown'}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å: {e}")
            
            connection.commit()
            
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        return False

def verify_database_integrity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        SessionLocal = sessionmaker(bind=engine)
        db = SessionLocal()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            users_count = db.query(User).count()
            posts_count = db.query(Post).count()
            activities_count = db.query(UserActivity).count()
            analytics_count = db.query(Analytics).count()
            templates_count = db.query(PostTemplate).count()
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            logger.info(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
            logger.info(f"   üìù –ü–æ—Å—Ç—ã: {posts_count}")
            logger.info(f"   üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activities_count}")
            logger.info(f"   üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {analytics_count}")
            logger.info(f"   üìã –®–∞–±–ª–æ–Ω—ã: {templates_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins_count = db.query(User).filter(User.is_admin == True).count()
            logger.info(f"   üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admins_count}")
            
            if admins_count == 0:
                logger.warning("‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            
            if templates_count == 0:
                logger.warning("‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç–æ–≤!")
            
            return True
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î: {e}")
        return False

def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)"""
    try:
        # –î–ª—è PostgreSQL –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pg_dump
        backup_dir = "backups"
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = f"{backup_dir}/backup_{timestamp}.sql"
        
        # –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ä–µ–∞–ª—å–Ω—ã–π backup —Ç—Ä–µ–±—É–µ—Ç pg_dump
        logger.info(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –≤: {backup_file}")
        logger.info("üí° –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ pg_dump")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def run_migration():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    steps = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", check_database_connection),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü", check_existing_tables),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î", create_database_schema),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤", create_indexes),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", create_default_admins),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å—Ç–æ–≤", create_default_templates),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", create_initial_analytics),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î", verify_database_integrity),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", backup_database)
    ]
    
    success_count = 0
    
    for step_name, step_function in steps:
        logger.info(f"‚ñ∂Ô∏è {step_name}...")
        try:
            if step_function():
                success_count += 1
                logger.info(f"‚úÖ {step_name} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
            else:
                logger.error(f"‚ùå {step_name} - –æ—à–∏–±–∫–∞")
        except Exception as e:
            logger.error(f"‚ùå {step_name} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    logger.info(f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {success_count}/{len(steps)}")
    
    if success_count == len(steps):
        logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.error("üí• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("=" * 50)
    logger.info("üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• TELEGRAM –ë–û–¢–ê")
    logger.info("=" * 50)
    
    success = run_migration()
    
    logger.info("=" * 50)
    if success:
        logger.info("‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
        sys.exit(0)
    else:
        logger.error("‚ùå –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
        sys.exit(1)

if __name__ == "__main__":
    main()
