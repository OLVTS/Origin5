"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_session
from services.analytics_service import AnalyticsService
from services.user_service import UserService
from services.post_service import PostService
from utils.decorators import admin_required
import logging
import io
import matplotlib
matplotlib.use('Agg')  # –î–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

async def analytics_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            analytics_service = AnalyticsService(db)
            
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics_data = analytics_service.get_basic_analytics()
            
            text = f"""
üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**

üìà **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {analytics_data['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {analytics_data['weekly_active_users']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {analytics_data['total_posts']}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {analytics_data['published_posts']}

üìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**
‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {analytics_data['new_users_week']}
‚Ä¢ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: {analytics_data['new_posts_week']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {analytics_data['user_activities_week']}

üìã **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:**
            """
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞—Ö
            popular_templates = analytics_service.get_popular_templates()
            for template in popular_templates[:3]:
                text += f"\n‚Ä¢ {template['name']}: {template['usage_count']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"
            
            keyboard_buttons = [
                [
                    InlineKeyboardButton("üë§ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="analytics_personal"),
                    InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_charts")
                ]
            ]
            
            if db_user.is_admin:
                keyboard_buttons.extend([
                    [
                        InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="analytics_users"),
                        InlineKeyboardButton("üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤", callback_data="analytics_posts")
                    ],
                    [
                        InlineKeyboardButton("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_advanced"),
                        InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="analytics_export")
                    ]
                ])
            
            keyboard_buttons.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
            
            keyboard = InlineKeyboardMarkup(keyboard_buttons)
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ analytics_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")

async def user_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            analytics_service = AnalyticsService(db)
            
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = analytics_service.get_user_statistics(db_user.id)
            
            text = f"""
üë§ **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üìä **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {user_stats['total_activities']}
‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {user_stats['weekly_activities']}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {db_user.last_activity.strftime('%d.%m.%Y %H:%M')}

üìù **–ü–æ—Å—Ç—ã:**
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {user_stats['total_posts']}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {user_stats['published_posts']}
‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {user_stats['draft_posts']}

üìà **–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å—Ç–æ–≤: {user_stats.get('post_views', 0)}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: {len(user_stats.get('used_templates', []))}

‚è∞ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {user_stats.get('avg_post_creation_time', 'N/A')}
‚Ä¢ –ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {user_stats.get('most_active_day', 'N/A')}
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="analytics_personal_charts"),
                    InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="analytics_personal_detailed")
                ],
                [
                    InlineKeyboardButton("üìä –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_general"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_stats_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@admin_required
async def post_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        db = get_session()
        
        try:
            analytics_service = AnalyticsService(db)
            post_service = PostService(db)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤
            post_stats = analytics_service.get_post_statistics()
            
            text = f"""
üìù **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤**

üìä **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {post_stats['total_posts']}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {post_stats['published_posts']}
‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {post_stats['draft_posts']}
‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã—Ö: {post_stats['deleted_posts']}

üìà **–î–∏–Ω–∞–º–∏–∫–∞:**
‚Ä¢ –ü–æ—Å—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {post_stats['posts_this_week']}
‚Ä¢ –ü–æ—Å—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü: {post_stats['posts_this_month']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {post_stats['avg_posts_per_day']:.1f}

üìã **–ü–æ —à–∞–±–ª–æ–Ω–∞–º:**
            """
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
            template_stats = analytics_service.get_template_usage_stats()
            for template_stat in template_stats[:5]:
                text += f"\n‚Ä¢ {template_stat['template_name']}: {template_stat['usage_count']} –ø–æ—Å—Ç–æ–≤"
            
            text += f"""

üë§ **–ü–æ –∞–≤—Ç–æ—Ä–∞–º:**
‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–≤—Ç–æ—Ä: {post_stats.get('most_active_author', 'N/A')}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: {post_stats.get('avg_post_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç: #{post_stats.get('most_popular_post', 'N/A')}
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Å—Ç–æ–≤", callback_data="analytics_post_charts"),
                    InlineKeyboardButton("üë• –ü–æ –∞–≤—Ç–æ—Ä–∞–º", callback_data="analytics_authors")
                ],
                [
                    InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="analytics_post_detailed"),
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="analytics_export_posts")
                ],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics_general")]
            ])
            
            await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ post_stats_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–æ–≤.")

@admin_required
async def export_data_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        text = """
üì§ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:

üìä **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ CSV - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ Excel/Google Sheets
‚Ä¢ JSON - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ PDF - –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤

üóÇ **–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –ü–æ—Å—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–∞–º–ø —Å–∏—Å—Ç–µ–º—ã

‚ö†Ô∏è **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –≠–∫—Å–ø–æ—Ä—Ç –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
        """
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (CSV)", callback_data="analytics_export_analytics_csv"),
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (CSV)", callback_data="analytics_export_users_csv")
            ],
            [
                InlineKeyboardButton("üìù –ü–æ—Å—Ç—ã (JSON)", callback_data="analytics_export_posts_json"),
                InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π –¥–∞–º–ø", callback_data="analytics_export_full")
            ],
            [
                InlineKeyboardButton("üìà –û—Ç—á–µ—Ç (PDF)", callback_data="analytics_export_report_pdf"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics_general")
            ]
        ])
        
        await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ export_data_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —ç–∫—Å–ø–æ—Ä—Ç–∞.")

async def handle_analytics_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data.replace("analytics_", "")
        
        if data == "general":
            await show_general_analytics(update, context)
            
        elif data == "personal":
            await user_personal_stats_callback(update, context)
            
        elif data == "charts":
            await generate_analytics_charts(update, context)
            
        elif data == "users":
            await show_user_analytics(update, context)
            
        elif data == "posts":
            await show_post_analytics(update, context)
            
        elif data == "advanced":
            await show_advanced_analytics(update, context)
            
        elif data.startswith("export_"):
            await handle_export_request(update, context, data.replace("export_", ""))
            
        elif data == "personal_charts":
            await generate_personal_charts(update, context)
            
        elif data == "personal_detailed":
            await show_detailed_personal_stats(update, context)
            
        elif data == "post_charts":
            await generate_post_charts(update, context)
            
        elif data == "authors":
            await show_author_analytics(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_analytics_callback: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")

async def show_general_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        db = get_session()
        
        try:
            analytics_service = AnalyticsService(db)
            analytics_data = analytics_service.get_basic_analytics()
            
            text = f"""
üìä **–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**

üìà **–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {analytics_data['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {analytics_data['weekly_active_users']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {analytics_data['total_posts']}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {analytics_data['published_posts']}

üìÖ **–î–∏–Ω–∞–º–∏–∫–∞ (7 –¥–Ω–µ–π):**
‚Ä¢ –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {analytics_data['new_users_week']}
‚Ä¢ –ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã: {analytics_data['new_posts_week']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {analytics_data['user_activities_week']}

üéØ **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏—é: {analytics_data.get('publication_rate', 0):.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {analytics_data.get('avg_posts_per_user', 0):.1f}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {analytics_data.get('user_activity_rate', 0):.1f}%
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_charts"),
                    InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="analytics_users")
                ],
                [
                    InlineKeyboardButton("üìù –ü–æ—Å—Ç—ã", callback_data="analytics_posts"),
                    InlineKeyboardButton("üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è", callback_data="analytics_advanced")
                ],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_general_analytics: {e}")

async def user_personal_stats_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Callback –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db = get_session()
        
        try:
            user_service = UserService(db)
            analytics_service = AnalyticsService(db)
            
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user:
                await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = analytics_service.get_detailed_user_statistics(db_user.id)
            
            text = f"""
üë§ **–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üìä **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚Ä¢ –î–Ω–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {user_stats['days_since_registration']}
‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {user_stats['total_activities']}
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {user_stats['total_posts']}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {user_stats['published_posts']}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: {user_stats['weekly_activities']}
‚Ä¢ –î–µ–π—Å—Ç–≤–∏–π –∑–∞ –º–µ—Å—è—Ü: {user_stats['monthly_activities']}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –¥–µ–Ω—å: {user_stats['avg_daily_activities']:.1f}

üìù **–ö–æ–Ω—Ç–µ–Ω—Ç:**
‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫–æ–≤: {user_stats['draft_posts']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {user_stats.get('avg_creation_time', 'N/A')}
‚Ä¢ –õ—é–±–∏–º—ã–π —à–∞–±–ª–æ–Ω: {user_stats.get('favorite_template', 'N/A')}

üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
‚Ä¢ –†–∞–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_stats.get('activity_rank', 'N/A')}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {user_stats.get('publication_percentile', 0):.1f}%
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìà –ú–æ–∏ –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_personal_charts"),
                    InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏", callback_data="analytics_personal_detailed")
                ],
                [
                    InlineKeyboardButton("üìä –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_general"),
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])
            
            await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_personal_stats_callback: {e}")

async def generate_analytics_charts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        await update.callback_query.answer("üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...")
        
        db = get_session()
        
        try:
            analytics_service = AnalyticsService(db)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            daily_stats = analytics_service.get_daily_statistics(days=30)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            plt.figure(figsize=(12, 8))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            plt.subplot(2, 2, 1)
            dates = [stat['date'] for stat in daily_stats]
            user_activities = [stat['user_activities'] for stat in daily_stats]
            
            plt.plot(dates, user_activities, marker='o', color='#2E86AB')
            plt.title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (30 –¥–Ω–µ–π)')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π')
            plt.xticks(rotation=45)
            plt.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
            plt.subplot(2, 2, 2)
            post_creations = [stat['posts_created'] for stat in daily_stats]
            
            plt.bar(dates, post_creations, color='#A23B72', alpha=0.7)
            plt.title('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (30 –¥–Ω–µ–π)')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤')
            plt.xticks(rotation=45)
            plt.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            plt.subplot(2, 2, 3)
            new_users = [stat['new_users'] for stat in daily_stats]
            
            plt.plot(dates, new_users, marker='s', color='#F18F01', linewidth=2)
            plt.title('–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (30 –¥–Ω–µ–π)')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            plt.xticks(rotation=45)
            plt.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
            plt.subplot(2, 2, 4)
            template_stats = analytics_service.get_template_usage_stats()
            
            template_names = [stat['template_name'] for stat in template_stats[:5]]
            usage_counts = [stat['usage_count'] for stat in template_stats[:5]]
            
            plt.pie(usage_counts, labels=template_names, autopct='%1.1f%%', startangle=90)
            plt.title('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
            buf.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=buf,
                caption="üìà **–ì—Ä–∞—Ñ–∏–∫–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π",
                parse_mode='Markdown'
            )
            
            plt.close()
            buf.close()
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_analytics_charts: {e}")
        await update.callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤.")

async def show_admin_analytics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        db = get_session()
        try:
            user_service = UserService(db)
            db_user = user_service.get_user_by_telegram_id(update.effective_user.id)
            
            if not db_user or not db_user.is_admin:
                await update.callback_query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
                return
            
            analytics_service = AnalyticsService(db)
            admin_analytics = analytics_service.get_admin_analytics()
            
            text = f"""
üëë **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ê–¥–º–∏–Ω)**

üéØ **–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
‚Ä¢ DAU (–¥–Ω–µ–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ): {admin_analytics['daily_active_users']}
‚Ä¢ WAU (–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ): {admin_analytics['weekly_active_users']}
‚Ä¢ MAU (–º–µ—Å—è—á–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ): {admin_analytics['monthly_active_users']}
‚Ä¢ Retention Rate: {admin_analytics['retention_rate']:.1f}%

üìä **–ö–æ–Ω–≤–µ—Ä—Å–∏–∏:**
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç: {admin_analytics['first_post_conversion']:.1f}%
‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫ ‚Üí –ü—É–±–ª–∏–∫–∞—Ü–∏—è: {admin_analytics['publication_conversion']:.1f}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {admin_analytics['user_engagement']:.1f}%

‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {admin_analytics['avg_post_creation_time']}
‚Ä¢ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {admin_analytics['peak_activity_hour']}:00
‚Ä¢ –°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {admin_analytics['most_productive_day']}

üî• **–¢—Ä–µ–Ω–¥—ã:**
‚Ä¢ –†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {admin_analytics['user_growth_rate']:+.1f}%
‚Ä¢ –†–æ—Å—Ç –ø–æ—Å—Ç–æ–≤: {admin_analytics['post_growth_rate']:+.1f}%
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {admin_analytics['activity_change']:+.1f}%
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_admin_charts"),
                    InlineKeyboardButton("üë• –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="analytics_user_analysis")
                ],
                [
                    InlineKeyboardButton("üìù –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", callback_data="analytics_content_analysis"),
                    InlineKeyboardButton("üîç –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑", callback_data="analytics_behavior")
                ],
                [
                    InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", callback_data="analytics_export_admin_report"),
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics_general")
                ]
            ])
            
            await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
            
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_admin_analytics: {e}")

async def handle_export_request(update: Update, context: ContextTypes.DEFAULT_TYPE, export_type: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await update.callback_query.answer("üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...")
        
        db = get_session()
        
        try:
            analytics_service = AnalyticsService(db)
            
            if export_type == "analytics_csv":
                # –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ CSV
                analytics_data = analytics_service.get_daily_statistics(days=365)
                df = pd.DataFrame(analytics_data)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ CSV –≤ –±—É—Ñ–µ—Ä
                csv_buffer = io.StringIO()
                df.to_csv(csv_buffer, index=False, encoding='utf-8')
                csv_buffer.seek(0)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                csv_bytes = io.BytesIO(csv_buffer.getvalue().encode('utf-8'))
                csv_bytes.name = f"analytics_{datetime.now().strftime('%Y%m%d')}.csv"
                
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=csv_bytes,
                    caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV",
                    filename=f"analytics_{datetime.now().strftime('%Y%m%d')}.csv"
                )
                
            elif export_type == "users_csv":
                # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV
                user_service = UserService(db)
                users_data = analytics_service.export_users_data()
                df = pd.DataFrame(users_data)
                
                csv_buffer = io.StringIO()
                df.to_csv(csv_buffer, index=False, encoding='utf-8')
                csv_buffer.seek(0)
                
                csv_bytes = io.BytesIO(csv_buffer.getvalue().encode('utf-8'))
                csv_bytes.name = f"users_{datetime.now().strftime('%Y%m%d')}.csv"
                
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=csv_bytes,
                    caption="üë• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV",
                    filename=f"users_{datetime.now().strftime('%Y%m%d')}.csv"
                )
                
            elif export_type == "posts_json":
                # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å—Ç–æ–≤ –≤ JSON
                posts_data = analytics_service.export_posts_data()
                
                import json
                json_str = json.dumps(posts_data, ensure_ascii=False, indent=2, default=str)
                json_bytes = io.BytesIO(json_str.encode('utf-8'))
                json_bytes.name = f"posts_{datetime.now().strftime('%Y%m%d')}.json"
                
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=json_bytes,
                    caption="üìù –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON",
                    filename=f"posts_{datetime.now().strftime('%Y%m%d')}.json"
                )
                
            else:
                await update.callback_query.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞.")
                
        finally:
            db.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_export_request: {e}")
        await update.callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.")
